@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Question";
    ViewBag.Layout = "~/Views/Shared/_Layout.cshtml";
    String prevClass = ViewBag.QuestionNumber == 1 ? "btn btn-primary btn-fw disabled" : "btn btn-primary btn-fw";
    String nextClass = ViewBag.QuestionNumber == ViewBag.QuestionsCount ? "btn btn-primary btn-fw disabled" : "btn btn-primary btn-fw";
    bool canSubmit = true;
    bool lastQuestionRemaining = false;

    ViewData["Prev"] = Localizer["Prev"];
    ViewData["Next"] = Localizer["Next"];
    ViewData["Submit"] = Localizer["Submit"];
    ViewData["QuestionFormat"] = Localizer["QuestionFormat"];
    ViewData["Questions"] = Localizer["Questions"];
}

@if (ViewBag.ShouldClearCookies)
{
    <script>
        for (var i = 1; i <= @(ViewBag.QuestionsCount); i++) {
            document.cookie = "answered_" + i + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
        }
        location.href = location.href.replace("clearCookies=true", "clearCookies=false");
    </script>
}

<h4>@(String.Format((ViewData["QuestionFormat"] as LocalizedHtmlString).Value, ViewBag.QuestionNumber, ViewBag.QuestionsCount))</h4>

<div class="instruction-text">
    @(ViewBag.Instruction)
</div>

@if (ViewBag.QuestionType is SliderQuestionType)
{
    <div class="question-text">
        @(ViewBag.Question.Text)
    </div>
    var slider = ViewBag.QuestionType as SliderQuestionType;
    int val = slider.MinValue;
    Int32.TryParse(ViewBag.Cookies?[$"answered_{ViewBag.QuestionNumber}"] ?? "", out val);
    int[] allVariants = Enumerable.Range(slider.MinValue, slider.MaxValue - slider.MinValue + 1).ToArray();
    String sliderTicks = "[" + String.Join(", ", allVariants.Select(v => $"{v}")) + "]";
    String quote = "\"";
    String sliderTicksLabels = "[" + String.Join(", ", allVariants.Select(v => $"{quote}{Math.Abs(v)}{quote}")) + "]";
    <table style="position:absolute; left:40%; top:38%; margin-left:auto; margin-right:auto; word-wrap:break-word; align-content:center;">
        <tr>
            <td style="width:100%; max-width:100%;">
                <p class="anta-slider">
                    <input id="value-slider" data-slider-id="value-slider-id" type="text" class="span2"
                           data-slider-min="@(slider.MinValue)"
                           data-slider-max="@(slider.MaxValue)"
                           data-slider-ticks="@(sliderTicks)"
                           data-slider-ticks-labels="@(sliderTicksLabels)"
                           data-slider-step="1" data-slider-value="@(val)" />
                </p>
            </td>
        </tr>
    </table>
    <div class="centered-buttons">
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber - 1)"
           onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(prevClass)">@(ViewData["Prev"])</a>
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber + 1)"
           onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(nextClass)">@(ViewData["Next"])</a>
    </div>
}

@if (ViewBag.QuestionType is AntagonisticQuestionType)
{
    var slider = ViewBag.QuestionType as AntagonisticQuestionType;
    int val = slider.MinValue;
    Int32.TryParse(ViewBag.Cookies?[$"answered_{ViewBag.QuestionNumber}"] ?? "", out val);
    int[] allVariants = Enumerable.Range(slider.MinValue, slider.MaxValue - slider.MinValue + 1).ToArray();
    String sliderTicks = "[" + String.Join(", ", allVariants.Select(v => $"{v}")) + "]";
    String quote = "\"";
    String sliderTicksLabels = "[" + String.Join(", ", allVariants.Select(v => $"{quote}{Math.Abs(v)}{quote}")) + "]";
    String[] antagonisticVariants = ViewBag.Question.Text.Split("\n", 3);
    int avLength = antagonisticVariants.Length;
    String avLeft = antagonisticVariants[avLength == 3 ? 1 : 0];
    String avRight = antagonisticVariants[avLength == 3 ? 2 : 1];
    @if (avLength == 3)
    {
        <div class="question-text">
            @(antagonisticVariants[0])
        </div>
    }
    <table style="margin-left:auto; margin-right:auto; width:80%; max-width:80%; word-wrap:break-word;">
        <tr>
            <td style="table-layout:fixed; width:40%; max-width:40%; word-wrap:break-word;">
                <div class="anta-question-text">
                    @(avLeft)
                </div>
            </td>
            <td style="width:20%; max-width:20%;">
                <p class="anta-slider">
                    <input id="value-slider" data-slider-id="value-slider-id" type="text" class="span2"
                           data-slider-min="@(slider.MinValue)"
                           data-slider-max="@(slider.MaxValue)"
                           data-slider-ticks="@(sliderTicks)"
                           data-slider-ticks-labels="@(sliderTicksLabels)"
                           data-slider-step="1" data-slider-value="@(val)" />
                </p>
            </td>
            <td style="width:40%; max-width:40%; word-wrap:break-word;">
                <div class="anta-question-text">
                    @(avRight)
                </div>
            </td>
        </tr>
    </table>
    <div class="centered-buttons">
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber - 1)"
           onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(prevClass)">@(ViewData["Prev"])</a>
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber + 1)"
           onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(nextClass)">@(ViewData["Next"])</a>
    </div>
}

@if (ViewBag.QuestionType is VariantQuestionType)
{
    <div class="question-text">
        @(ViewBag.Question.Text)
    </div>
    var variant = ViewBag.QuestionType as VariantQuestionType;
    <div id="vars" class="btn-group btn-group-justified btn-margin question-variants" data-toggle="buttons">
        @for (int i = 0; i < variant.Variants.Count; i++)
        {
            <label class="btn btn-primary">
                <input type="radio" name="options" id="option@(i+1)" onchange="global_answer=@(i+1);"> @(variant.Variants[i])
            </label>
        }
    </div>
    <br>
    <div class="centered-buttons">
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber - 1)"
           onclick="setAnswered(null);" class="@(prevClass)">@(ViewData["Prev"])</a>
        <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber + 1)"
           onclick="setAnswered(null);" class="@(nextClass)">@(ViewData["Next"])</a>
    </div>
}

@for (int i = 1; i <= ViewBag.QuestionsCount; i++)
{
    bool answered = ((ViewBag.Cookies?[$"answered_{i}"] ?? "") != "");
    @if (!answered)
    {
        if (i == ViewBag.QuestionNumber)
        {
            lastQuestionRemaining = true;
        }
        else
        {
            canSubmit = false;
        }
    }
}

@if (canSubmit)
{
    <div class="centered-button-submit">
        <a href="javascript:void(0);" class="btn btn-large btn-success btn-fw" onclick="submitAnswers(@(lastQuestionRemaining));">@(ViewData["Submit"])</a>
    </div>
}

<hr style="height:30pt; visibility:hidden;" />

<div id="questions-list" style="position: absolute; bottom: 10%;">
    <!-- Display only the current part -->
    <form>
        @for (int i = ViewBag.MinQuestionNumber; i <= ViewBag.MaxQuestionNumber; i++)
        {
            bool answered = ((ViewBag.Cookies?[$"answered_{i}"] ?? "") != "");
            String buttonClass = answered ? "btn btn-success btn-margin" : "btn btn-primary btn-margin";
            @if (i == ViewBag.QuestionNumber)
            {
                buttonClass += " btn-outline";
            }
            if (answered)
            {
                <a class="@(buttonClass)" href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(i)"> </a>

            }
            else
            {
                <a class="@(buttonClass)" href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(i)"> </a>

            }
        }
    </form>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#value-slider').slider({
                ticks: $('#value-slider').prop("data-slider-ticks"),
                ticks_labels: $('#value-slider').prop("data-slider-ticks-labels"),
                selection: "none",
                tooltip: "hide"
            }).on("slideStop", function () {
                $('.slider-handle').css("opacity", 1.0);
                });
            if (getCookie("answered_" + @(ViewBag.QuestionNumber)) != undefined) {
                if ($('#value-slider').length) {
                    // for slider
                    $('.slider-handle').css("opacity", 1.0);
                } else {
                    // for non-slider
                    var v = parseInt(getCookie("answered_" + @(ViewBag.QuestionNumber)));
                    var r = $("input:radio[name=options]")[v - 1];
                    $(r).addClass("active");
                    $(r).prop('checked', true);
                    // we should reload the whole div
                   $("#vars").load(location.href + " #vars>*", "");
                }
            }
        });
    </script>
    <script>
        // Redirect POST
        $.extend(
            {
                redirectPost: function (location, args) {
                    var form = $('<form></form>');
                    form.attr("method", "post");
                    form.attr("action", location);

                    $.each(args, function (key, value) {
                        var field = $('<input></input>');

                        field.attr("type", "hidden");
                        field.attr("name", key);
                        field.attr("value", JSON.stringify(value));

                        form.append(field);
                    });
                    $(form).appendTo('body').submit();
                }
            });

        var global_answer;
        var True = true;
        var False = false;
        function setAnswered(val) {
            if (val == null || val == undefined) val = global_answer;
            /* if still null or undefined, don't set or spoil the existing answer */
            if (val == null || val == undefined) return;
            /* if slider handle is transparent (not touched), treat it as unanswered */
            if ($('.slider-handle').css("opacity") == 0.0) return;
            document.cookie = 'answered_@(ViewBag.QuestionNumber)=' + val;
            //alert(val);
            //alert(document.cookie);
        }

        function getCookie(name) {
            var matches = document.cookie.match(new RegExp(
                "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
            ));
            return matches ? decodeURIComponent(matches[1]) : undefined;
        }

        function prepareAnswersForSubmit() {
            var results = { "testID": @(ViewBag.TestID) };
            for (var i = 1; i <= @(ViewBag.QuestionsCount); i++) {
                results["results[" + i+ "]"] = parseInt(getCookie("answered_" + i));
            }
            return results;
        }

        function submitAnswers(lastQuestionRemaining) {
            if (lastQuestionRemaining)
            {
                if ($('#value-slider').length) {
                    // for slider
                    setAnswered($('#value-slider').slider('getValue'));
                } else {
                    // for non-slider
                    setAnswered(null);
                }
            }
            var answers = prepareAnswersForSubmit();
            $.redirectPost("/PerformTest/Submit", answers);

        }
    </script>
}