@{
    ViewData["Title"] = "Question";
    ViewBag.Layout = "~/Views/Shared/_Layout.cshtml";
    String prevClass = ViewBag.QuestionNumber == 1 ? "btn btn-primary disabled" : "btn btn-primary"; 
    String nextClass = ViewBag.QuestionNumber == ViewBag.QuestionsCount ? "btn btn-primary disabled" : "btn btn-primary"; 
    bool canSubmit = true;
}

@if(ViewBag.ShouldClearCookies)
{
    <script>
        for (var i = 1; i <= @(ViewBag.QuestionsCount); i++) {
            document.cookie = "answered_" + i + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
        }
        location.href = location.href.replace("clearCookies=true", "clearCookies=false");
    </script>
}

<h2>Question @(ViewBag.QuestionNumber) of @(ViewBag.QuestionsCount)</h2>

@for (int i = 1; i <= ViewBag.QuestionsCount; i++)
{
    bool answered = ((ViewBag.Cookies?[$"answered_{i}"] ?? "") != "");
    @if (!answered)
    { 
        canSubmit = false;
    }
    String buttonClass = answered ? "btn btn-success" : "btn btn-danger";
    @if(i == ViewBag.QuestionNumber)
    {
        buttonClass += " btn-outline";
    }
    <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(i)" class="@(buttonClass)">@(i)</a>
}
<br>

<div class="question-text">
    @(ViewBag.Question.Text)
</div>

@if(ViewBag.QuestionType is SliderQuestionType)
{
    var slider = ViewBag.QuestionType as SliderQuestionType;
    int val = slider.MinValue;
    Int32.TryParse(ViewBag.Cookies?[$"answered_{ViewBag.QuestionNumber}"] ?? "", out val);
    <p>
        <b>@(slider.MinValue)   </b>
        <input id="value-slider" data-slider-id="value-slider-id" type="text"  class="span2"
               data-slider-min="@(slider.MinValue)" 
               data-slider-max="@(slider.MaxValue)" 
               data-slider-step="1" data-slider-value="@(val)"/>
        <b>   @(slider.MaxValue)</b>
    </p>
    <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber - 1)" 
        onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(prevClass)">Prev</a>
    <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber + 1)" 
        onclick="setAnswered($('#value-slider').slider('getValue'));" class="@(nextClass)">Next</a>
}

@if(ViewBag.QuestionType is VariantQuestionType)
{
    var variant = ViewBag.QuestionType as VariantQuestionType;
    <div class="btn-group" data-toggle="buttons">
        @for(int i = 0; i < variant.Variants.Count; i++)
        {
            <label class="btn btn-primary">
                <input type="radio" name="options" id="option@(i+1)" onchange="global_answer=@(i+1);" @((ViewBag.Cookies?[$"answered_{i}"] ?? "") == $"{i}" ? "checked" : "unchecked")> @(variant.Variants[i])
            </label>
        }
    </div>
    <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber - 1)" 
        onclick="setAnswered(null);" class="@(prevClass)">Prev</a>
    <a href="/PerformTest/Test?testID=@(ViewBag.TestID)&questionNumber=@(ViewBag.QuestionNumber + 1)" 
        onclick="setAnswered(null);" class="@(nextClass)">Next</a>
}

@if(canSubmit) 
{
    <a href="javascript:void(0);" class="btn btn-large btn-success" onclick="submitAnswers();">Submit</a>
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function() {
            $('#value-slider').slider({
                tooltip: "always"
            });
        });
    </script>
    <script>
        // Redirect POST
        $.extend(
            {
                redirectPost: function (location, args) {
                    var form = $('<form></form>');
                    form.attr("method", "post");
                    form.attr("action", location);

                    $.each(args, function (key, value) {
                        var field = $('<input></input>');

                        field.attr("type", "hidden");
                        field.attr("name", key);
                        field.attr("value", JSON.stringify(value));

                        form.append(field);
                    });
                    $(form).appendTo('body').submit();
                }
            });

        var global_answer;
        function setAnswered(val) {
            if (val == null || val == undefined) val = global_answer;
               /* if still null or undefined, don't set or spoil the existing answer */
            if (val == null || val == undefined) return;
            document.cookie = 'answered_@(ViewBag.QuestionNumber)=' + val;       
            //alert(val);
            //alert(document.cookie);
        }

        function getCookie(name) {
            var matches = document.cookie.match(new RegExp(
                "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
            ));
            return matches ? decodeURIComponent(matches[1]) : undefined;
        }

        function prepareAnswersForSubmit() {
            var results = { "testID": @(ViewBag.TestID) };
            for (var i = 1; i <= @(ViewBag.QuestionsCount); i++) {
                results["results[" + i+ "]"] = parseInt(getCookie("answered_" + i));
            }
            return results;
        }
        
        function submitAnswers() {
            var answers = prepareAnswersForSubmit();
            $.redirectPost("/PerformTest/Submit", answers);

        }
    </script>
}